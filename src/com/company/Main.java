package com.company;

import java.time.LocalDate;

public class Main {

    public static void main(String[] args) {
	// write your code here
        /*
        ### Задание 1
        Реализуйте метод, который получает в качестве параметра год, а затем проверяет, является ли он високосным,
        и выводит результат в консоль.
        *Эту проверку вы уже реализовывали в задании по условным операторам.*
        Теперь проверку нужно обернуть в метод и использовать год, который приходит в виде параметра.
        Результат программы выведите в консоль. Если год високосный, то должно быть выведено “
        *номер года —* високосный год”. Если год не високосный, то, соответственно: “
        * *номер года —* не **високосный год”.
         */
        System.out.println(" Задание 1");
        int year = 2021;
        System.out.println("У нас данн " + year + " год  посмотрим является ли он високосным или нет");
        System.out.println(year % 100 + " деление на 100");
        System.out.println(year % 400 + " деление на 400");
        System.out.println(year % 4 + " деление на 4");
        if (LeapYear(year)){ // вызываем  метод расчета високосного года в условие сравнения
            System.out.println(year + " год является високосным");
        } else {
            System.out.println(year + " год не является високосным");}
        System.out.println();

        /*
        ### Задание 2
        Вспомним задание 2 по условным операторам, где нам необходимо было предложить пользователю облегченную версию приложения.
        - Текст прошлого задания
        К нам пришли коллеги и сообщили, что нам нужно знать не только операционную систему телефона, но и год его создания:
         от этого зависит, подойдет ли приложение для телефона или оно просто не установится.
         Если телефон произведен с 2015 по нынешний год, то приложение будет работать корректно.
         Если телефон произведен ранее 2015 года, то клиенту нужно посоветовать установить облегченную версию приложения.
         Ваша задача: написать программу, которая выдает соответствующее сообщение клиенту при наличии двух условий
         — операционной системы телефона (iOS или Android) и года производства.
         Если год выпуска ранее 2015 года, то к сообщению об установке нужно добавить информацию об облегченной версии.
             Например, для iOS оно будет звучать так:
             «Установите облегченную версию приложения для iOS по ссылке».
             А для Android так:
            «Установите облегченную версию приложения для Android по ссылке».
         При этом для пользователей с телефоном с 2015 года выпуска нужно вывести обычное предложение об установке приложения.
         Для обозначения года создания используйте переменную clientDeviceYear, где необходимо указать 2015 год.
         **Важно**: вложенность больше двух этажей не допускается (условный оператор внутри условного оператора).
         Напишите метод, куда подаются два параметра: тип операционной системы (ОС) ( 0 — iOS или 1 — Android )
         и год выпуска устройства.
         Если устройство старше текущего года, предложите ему установить lite-версию (облегченную версию).
         Текущий год можно получить таким способом:
         ```java
           int currentYear = LocalDate.now().getYear();
         ```
         Или самим задать значение вручную, введя в переменную числовое значение.
         В результате программа должна выводить в консоль в зависимости от исходных данных, какую версию приложения
         (обычную или lite) и для какой ОС (Android или iOS) нужно установить пользователю.
         */
        System.out.println(" Задание 2");
        int clientOS = 0;
        //int clientDeviceYear = 2012;
        int clientDeviceYear = LocalDate.now().getYear(); // считывание текущего года из системы
        System.out.println("Сейчас - "+ clientDeviceYear + " год " );
        installationOS( clientOS, clientDeviceYear);// вызов метода выводящего какую ОС устанавливать
        System.out.println();

        /*
        ### Задание 3
        Возвращаемся к любимой многими задаче на расчет дней доставки банковской карты от банка.
        - Текст прошлого задания
        Вернемся к делам банковским. У нас хороший банк, поэтому для наших клиентов мы организуем доставку банковских
        карт на дом с четкой датой доставки. Чтобы известить клиента о том, когда будет доставлена его карта, нам нужно
         знать расстояние от нашего офиса до адреса доставки.
            Правила доставки такие:
         Доставка в пределах 20 км занимает сутки.
         Доставка в пределах от 20 км до 60 км добавляет еще один день доставки.
         Доставка в пределах 60 км до 100 км добавляет еще одни сутки.
         То есть с каждым следующим интервалом доставки срок увеличивается на 1 день.
         Напишите программу, которая выдает сообщение в консоль:
        "Потребуется дней: " + срок доставки
         Объявите целочисленную переменную deliveryDistance = 95, которая содержит дистанцию до клиента.
        Наша задача — доработать код, а именно написать метод, который на вход принимает дистанцию и возвращает
        итоговое количество дней доставки.
         */

        System.out.println(" Задание 3");
        int deliveryDistance = 95;
        System.out.println("Нам нужно доставить карту на расстояние " + deliveryDistance + " км" );
        int limitation = 20;
        // дистанциии 20 (задействуем на доставку день) далее 60 (прибавляем день) далее 100 (прибавляем день)
        // отсюда мы видим если увеличиваем расстояние с шагом на 40 то у нас идет прибавка на один день
        int stepDistance = 40;
        int numberDays = 1;
        numberDays += deliveryDays (limitation, stepDistance, deliveryDistance);
        System.out.println(" Нам потребуется дней: " + numberDays + " для доставки");
        System.out.println();

    }
    // метод расчитывающий, високосный (возвращает true) или не високосный (возвращает false) год
    private static boolean LeapYear(int year) {
        if ((year % 4 == 0) && (year % 100 != 0) || (year % 400 == 0)) {
            return true;
        }
        return false;

    }
    // метод выбирает весрсию опреционной системы для установки на телефон
    private static void installationOS (int clientOS, int clientDeviceYear){

        if (clientOS == 0 && clientDeviceYear >= 2015) {
            System.out.println("Установите версию приложения для iOS по ссылке");
        }  else if (clientOS == 0 && clientDeviceYear < 2015){
            System.out.println("Установите облегченную версию приложения для iOS по ссылке");
        }  else if (clientOS == 1 && clientDeviceYear >= 2015) {
            System.out.println("Установите версию приложения для Android по ссылке");
        }  else if (clientOS == 1 && clientDeviceYear < 2015) {
            System.out.println("Установите облегченную версию приложения для Android по ссылке");
        }

    }
    //расчет количества дней доставки до клиента от расстояния
    private static int deliveryDays (int limitation, int stepDistance, int deliveryDistance ){
        int numberDays = 0;
        if (deliveryDistance > limitation) {
            numberDays += ((deliveryDistance - limitation) / stepDistance);
            if ((deliveryDistance - limitation) % stepDistance > 0) {
                numberDays++;
            }
        }
        return numberDays;
    }

}
